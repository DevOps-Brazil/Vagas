name: Atualizar README com Issues

on:
  issues:
    types: [opened, closed, reopened]
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Atualizar README
        run: |
          # Configurar token e repo
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          REPO="${{ github.repository }}"
          
          # Buscar issues abertas
          echo "Buscando issues abertas..."
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/issues?state=open&per_page=100")
          
          # Filtrar PRs e contar
          ISSUES=$(echo "$RESPONSE" | jq '[.[] | select(has("pull_request") | not)]')
          COUNT=$(echo "$ISSUES" | jq 'length')
          echo "Encontradas $COUNT issues abertas"
          
          # Criar conteúdo atualizado
          SECTION="## Vagas Disponíveis\n\n"
          SECTION+="Lista de vagas disponíveis:\n\n"
          
          # Processar cada issue
          for i in $(seq 0 $(($COUNT - 1))); do
            ISSUE=$(echo "$ISSUES" | jq ".[$i]")
            TITLE=$(echo "$ISSUE" | jq -r '.title')
            URL=$(echo "$ISSUE" | jq -r '.html_url')
            DATE=$(echo "$ISSUE" | jq -r '.created_at' | cut -d'T' -f1)
            
            # Formatar data (ano-mes-dia para dia/mes/ano)
            if [ -n "$DATE" ]; then
              # Usar formato mais simples e direto para evitar problemas com o awk
              DIA=$(echo "$DATE" | cut -d'-' -f3)
              MES=$(echo "$DATE" | cut -d'-' -f2)
              ANO=$(echo "$DATE" | cut -d'-' -f1)
              DATE_BR="${DIA}/${MES}/${ANO}"
            else
              DATE_BR="data não disponível"
              echo "AVISO: Data não encontrada para issue $TITLE"
            fi
            
            # Adicionar entrada à lista sem caracteres especiais na formatação
            ITEM="- [$TITLE]($URL) - _Publicada em $DATE_BR_"
            SECTION="$SECTION$ITEM\n"
          done
          
          # Adicionar informações sobre como publicar
          SECTION+="\n## Como publicar uma vaga\n\n"
          SECTION+="Abra uma [nova issue](https://github.com/$REPO/issues/new) com o título da vaga e todas as informações necessárias no corpo da issue.\n"
          
          # Salvar a seção em um arquivo
          echo -e "$SECTION" > section.txt
          
          # Criar README temporário
          START_LINE=$(grep -n "<!-- VAGAS_START -->" README.md | cut -d':' -f1)
          END_LINE=$(grep -n "<!-- VAGAS_END -->" README.md | cut -d':' -f1)
          
          if [ -n "$START_LINE" ] && [ -n "$END_LINE" ]; then
            # Extrair parte antes do marcador
            head -n $START_LINE README.md > new_readme.md
            
            # Adicionar nova seção
            cat section.txt >> new_readme.md
            
            # Extrair parte após o marcador
            tail -n +$END_LINE README.md >> new_readme.md
            
            # Substituir README
            mv new_readme.md README.md
          else
            # Marcadores não encontrados, adicionar ao final
            echo -e "\n<!-- VAGAS_START -->" >> README.md
            cat section.txt >> README.md
            echo -e "<!-- VAGAS_END -->" >> README.md
          fi
          
          # Commit e push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "docs: atualiza lista de vagas no README"
          git push
