name: Atualizar README com Issues

on:
  issues:
    types: [opened, closed, reopened]
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Atualizar README com issues
        run: |
          # Configurar token para API
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          REPO="${{ github.repository }}"
          
          # Buscar issues abertas (sem PRs)
          issues=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/issues?state=open&per_page=100" | \
            jq '[.[] | select(has("pull_request") | not)]')
          
          # Contar issues
          issues_count=$(echo "$issues" | jq 'length')
          echo "Encontradas $issues_count issues abertas"
          
          # Criar conteúdo da seção de vagas
          vagas_section="## Vagas Disponíveis\n\n"
          
          if [ "$issues_count" -eq "0" ]; then
            vagas_section="${vagas_section}No momento não há vagas disponíveis. Fique atento para novas oportunidades!\n"
          else
            vagas_section="${vagas_section}Lista de vagas disponíveis:\n\n"
            
            # Iterar sobre cada issue para formar a lista
            echo "$issues" | jq -c '.[]' | while read -r issue; do
              title=$(echo "$issue" | jq -r '.title')
              url=$(echo "$issue" | jq -r '.html_url')
              date=$(echo "$issue" | jq -r '.created_at' | cut -d'T' -f1 | awk -F- '{print $3"/"$2"/"$1}')
              
              vagas_section="${vagas_section}- [$title]($url) - _Publicada em $date_\n"
            done
          fi
          
          # Adicionar seção de como publicar vaga
          vagas_section="${vagas_section}\n## Como publicar uma vaga\n\n"
          vagas_section="${vagas_section}Abra uma [nova issue](https://github.com/$REPO/issues/new) com o título da vaga e todas as informações necessárias no corpo da issue.\n"
          
          # Definir marcadores
          README="README.md"
          START_MARKER="<!-- VAGAS_START -->"
          END_MARKER="<!-- VAGAS_END -->"
          
          # Substituir conteúdo entre marcadores (ou criar se não existirem)
          if grep -q "$START_MARKER" "$README" && grep -q "$END_MARKER" "$README"; then
            echo "Atualizando seção existente no README..."
            
            # Pegar o conteúdo antes do marcador inicial
            start_content=$(sed -n "1,/$START_MARKER/p" "$README")
            
            # Pegar o conteúdo após o marcador final
            end_content=$(sed -n "/$END_MARKER/,\$p" "$README")
            
            # Montar o novo conteúdo
            echo "$start_content" > "$README.new"
            echo -e "$vagas_section" >> "$README.new"
            echo "$end_content" >> "$README.new"
            
            mv "$README.new" "$README"
          else
            echo "Marcadores não encontrados, adicionando seção ao final do README..."
            
            echo -e "\n$START_MARKER\n$vagas_section\n$END_MARKER" >> "$README"
          fi
          
          # Commit e push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$README"
          
          # Só faz commit se houver mudanças
          if git diff --staged --quiet; then
            echo "Nenhuma mudança no README"
          else
            git commit -m "docs: atualiza lista de vagas no README"
            git push
          fi
